version: "3.7"
  # expose:
  #   - 8080
  # ports:
  #   - 8080:8080
  # docker-compose down --remove-orphans
  # docker-compose up -d --build
  # docker-compose logs -f backend
  # ls -la
  # docker inspect f6f
  # docker inspect  -f '{{.GraphDriver.Data.LowerDir}}' f6f
  # docker inspect  -f '{{.GraphDriver.Data.LowerDir}}' f6f | tr ':' '\n' | tail -n 1 
  # docker rm -f f6f
  # cat package.json | jq '.scripts.dev'
  # docker-compose ps 
  # docker compose ls
  # docker-compose exex api anchore-cli system feeds list
x-backend:
  &backend
  container_name: backend
  restart: always
  command: npm run dev
  environment:
    - dbURI=mongodb://root:example@mongo:27017
  networks:
    - app-network
    - nginx-network
  depends_on:
    - mongo
  build:
    context: .
    dockerfile: ./.docker/Dockerfile

services:
  nginx:
    image: nginx
    ports:
      - 8080:80
      - 443:443
    volumes:
      - ./.docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    restart: always
    depends_on:
      - backend1
      - backend2
      - backend3
    networks:
      - nginx-network
  backend1:
    <<: *backend
    container_name: backend1
  backend2:
    <<: *backend
    container_name: backend2
  backend3:
    <<: *backend
    container_name: backend3

  mongo:
    container_name: mongo
    image: mongo
    restart: always
    networks:
      - app-network
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    networks:
      - app-network
    depends_on:
      - mongo
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

networks:
  app-network:
    driver: bridge
  nginx-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local
